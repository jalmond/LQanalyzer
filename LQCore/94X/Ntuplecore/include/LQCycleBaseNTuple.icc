// Dear emacs, this is -*- c++ -*-  
// $Id:  LQCycleBaseNTuple.icc  jalmond$  
/***************************************************************************  
 * @author  John Almond
 *                                                                              
 ***************************************************************************/


#ifndef LQCycleBaseNTuple_ICC
#define LQCycleBaseNTuple_ICC


// System include(s):
#include <string.h>
#include <cxxabi.h>
#include <cstdlib>

// STL include(s):
#include <sstream>
#include <typeinfo>

// ROOT include(s):
#include <TTree.h>
#include <TBranch.h>
#include <TLeaf.h>
#include <TString.h>


template < class T >
TBranch* LQCycleBaseNTuple::DeclareVariable( T& obj, const char* name,
                                const char* treeName )throw( LQError ) {
  TTree*  output_tree = 0;
  TBranch* branch = 0;


  if( treeName ) {
    output_tree = GetOutputTree( treeName );
    
    if(!output_tree){
      m_logger << INFO << "Will create a tree for you. With name " << treeName  << LQLogger::endmsg;
      CreateOutputTrees(m_outputFile, treeName , "");
      output_tree = GetOutputTree( treeName );
      if(!output_tree) {
	m_logger << ERROR << "Failed to creat this tree " << treeName << LQLogger::endmsg;
	throw LQError( "No many output trees created !!!",   LQError::StopExecution );
      }
    }
  }
  else {
    if( m_outputTrees.size()  > 1)  throw LQError( "Many output trees created. You MUST speicfy whhich tree to connect output in DeclareVariable !!!",   LQError::StopExecution );
    if( m_outputTrees.size() == 1 )   output_tree = m_outputTrees.front();
    else {
      m_logger << WARNING  << "No output tree is specified in DeclareVariables. None exists in memory. Creating default tree."  << LQLogger::endmsg;
      CreateOutputTrees(m_outputFile, "LQTree" , "");
      output_tree = GetOutputTree( "LQTree");
    }
  }
  //                                                                           
  // Check if the tree has been found:                                         
  // 
  if( ! output_tree ) {
    LQError error( LQError::SkipInputData );
    if( treeName ) {
      error << "Couldn't find output tree with name: " << treeName;
    } else {
      error << "Couldn't find default output tree";
    }
    throw error;
  }

  REPORT_VERBOSE( "Found output tree with name: " << output_tree->GetName() );
  branch = output_tree->GetBranch( name );
  
  if( ! branch ) {
    
    //                                                                        
    // This branch doesn't exist yet. We have to (try to) create it.          
    //                                                                        
    m_logger << DEBUG << "Creating new output branch with name: " << name
             << LQLogger::endmsg;

    const char* type_name = typeid( obj ).name();

    if( strlen( type_name ) == 1 ) {
      // This is a simple variable:      
      std::ostringstream leaflist;
      leaflist << name << "/" << RootType( type_name );
      branch = output_tree->Branch( name, &obj, leaflist.str().c_str() );
      m_logger << DEBUG << "Simple variable " << LQLogger::endmsg;
    }
    else {
      
      m_logger << DEBUG << "Complex variable/object " << LQLogger::endmsg;
      //                                                                     
      // This is an object:                                                  
      //                                                                     
      REPORT_VERBOSE( "The supplied variable is an object" );
      
      int status;
      char* real_type_name = abi::__cxa_demangle( type_name, 0, 0, &status );

      if( status ) {
	LQError error( LQError::StopExecution );
	error << "Couldn't demangle type name: " << type_name;
	throw error;
      }
      if(real_type_name == NULL) {
	LQError error( LQError::SkipInputData );
	error << "Couldn't create branch with name: " << name;
	throw error;
      }
      std::string sname(real_type_name);
      size_t found = sname.find("::__1");
      while(found != std::string::npos){
	sname.erase(found,5);
	found = sname.find("::__1");
      }
      
      T* pointer = &obj;
      m_outputVarPointers.push_back( pointer );
      branch = output_tree->Bronch( name, sname.c_str(), &m_outputVarPointers.back() );      
      free( real_type_name );
    }
    
    if( ! branch ) {
      LQError error( LQError::SkipInputData );
      error << "Couldn't create branch with name: " << name;
      throw error;
    }    
    REPORT_VERBOSE( "Successfully added branch" );
  }
  else {
    
    m_logger << WARNING << "A branch with the name \"" << name << "\" already\
 exists"
	     << LQLogger::endmsg;
    m_logger << WARNING << "New object not added to tree!" << LQLogger::endmsg \
      ;

  }
  
  m_logger << DEBUG  << "Created output branch" << LQLogger::endmsg;

  return branch;
}

#endif 
