# Dear emacs, this is a -*- makefile -*-                                                                                                                                  
# $Id: Makefile.common almond $
########################################################################### 
MAKEFLAGS = --no-print-directory -r -s -j4  

#
# Include the architecture definitions from the ROOT sources
#
#  Makefile.arch can be in two different locations depending on the system
#  you're compiling on. The Fink installed version of ROOT has this file
#  in a different location than the "normally installed" ROOT versions...
#
ARCH_LOC_1 := $(wildcard $(shell root-config --prefix)/test/Makefile.arch)
ARCH_LOC_2 := $(wildcard $(shell root-config --prefix)/share/root/test/Makefile.arch)
ARCH_LOC_3 := $(wildcard $(shell root-config --prefix)/share/doc/root/test/Makefile.arch)
ARCH_LOC_4 := $(wildcard $(shell root-config --prefix)/etc/Makefile.arch)
ARCH_LOC_5 := $(wildcard $(shell root-config --prefix)/etc/root/Makefile.arch)
ARCH_LOC_5 := $(wildcard $(shell root-config --prefix)/etc/root/Makefile.arch)
ARCH_LOC_6 := $(wildcard $(shell root-config --etcdir)/Makefile.arch)
ifneq ($(strip $(ARCH_LOC_1)),)
  $(info Using $(ARCH_LOC_1))
  include $(ARCH_LOC_1)
else
  ifneq ($(strip $(ARCH_LOC_2)),)
    $(info Using $(ARCH_LOC_2))
    include $(ARCH_LOC_2)
  else
    ifneq ($(strip $(ARCH_LOC_3)),)
      $(info Using $(ARCH_LOC_3))
      include $(ARCH_LOC_3)
    else
                ifneq ($(strip $(ARCH_LOC_4)),)
        $(info Using $(ARCH_LOC_4))
        include $(ARCH_LOC_4)
      else
        ifneq ($(strip $(ARCH_LOC_5)),)
          $(info Using $(ARCH_LOC_5))
          include $(ARCH_LOC_5)
        else
         ifneq ($(strip $(ARCH_LOC_6)),)
          $(info Using $(ARCH_LOC_6))
          include $(ARCH_LOC_6)
         else
         $(error Could not find Makefile.arch!)
        endif
        endif
        endif
    endif
  endif
endif


# Some compilation options                                                                                                                                                     
VPATH    += $(OBJDIR) $(SRCDIR)
INCLUDES += -Iinclude -I./

CXXFLAGS += -Wall -Wextra -Wno-overloaded-virtual  # -Wparentheses-equality #-Wno-unused


# Set the locations of some files                                                                                                                                               
DICTHEAD  = $(SRCDIR)/$(LIBRARY)_Dict.h
DICTFILE  = $(SRCDIR)/$(LIBRARY)_Dict.cxx
DICTOBJ   = $(OBJDIR)/$(LIBRARY)_Dict.o
DICTLDEF  = $(INCDIR)/$(LIBRARY)_LinkDef.h
SKIPCPPLIST = $(DICTFILE)
SKIPHLIST   = $(DICTHEAD) $(DICTLDEF)
LIBFILE   = $(LQANALYZER_LIB_PATH)/lib$(LIBRARY).a
SHLIBFILE = $(LQANALYZER_LIB_PATH)/lib$(LIBRARY).$(DllSuf)
UNAME = $(shell uname)


# Set up the default targets                                                                                                                                                    
default: shlib 

# List of all header and source files to build                                                                                                                                  
HLIST   = $(filter-out $(SKIPHLIST),$(wildcard $(INCDIR)/*.h))
CPPLIST = $(filter-out $(SKIPCPPLIST),$(wildcard $(SRCDIR)/*.cc))
# List of all object files to build                                                                                                                                             
OLIST = $(patsubst %.cc,%.o,$(notdir $(CPPLIST)))

# Implicit rule to compile all sources                                                                                                                                          
%.o : %.cc
	@echo "Compiling $<" 
	@mkdir -p $(OBJDIR) 
	@$(CXX) $(CXXFLAGS)  -c $< -o $(OBJDIR)/$(notdir $@) $(INCLUDES)

# Rule to create the dictionary                                                                                                                                                 
$(DICTFILE): $(HLIST) $(DICTLDEF)
	@echo "Generating dictionary $@"
	@$(shell root-config --exec-prefix)/bin/rootcint -f $(DICTFILE) -c -p  $(INCLUDES) $^ 

# Rule to comile the dictionary                                                                                                                                                 
$(DICTOBJ): $(DICTFILE)
	@echo "Compiling $<"
	@mkdir -p $(OBJDIR)
	@$(CXX) $(CXXFLAGS) -c $(INCLUDES) -o $@ $<



##############################                                                                                                                                                 
# The dependencies section                                                                                                                                                     
# - the purpose of the .d files is to keep track of the                                                                                                                        
#   header file dependence                                                                                                                                                     
# - this can be achieved using the makedepend command                                                                                                                          
############################## 
# Useful build targets                                                                                                                                                         
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
-include $(foreach var,$(notdir $(CPPLIST:.cc=.d)),$(DEPDIR)/$(var))
endif
endif

$(DEPDIR)/%.d: %.cc
	@mkdir -p $(DEPDIR)
	if test -f $< ; then \
                echo "Making $(@F)"; \
                $(SHELL) -ec '$(CPP) -MM $(CXXFLAGS) $(INCLUDES) $< | sed '\''/Cstd\/rw/d'\'' > $@'; \
        fi

# Rule to combine objects into a unix shared library                                                                                                                           
$(SHLIBFILE): $(OLIST) $(DICTOBJ)
	@echo "Making shared library: $(SHLIBFILE)"
	@rm -f $(SHLIBFILE)
ifneq (,$(findstring macosx,$(ARCH)))
	@$(LD) $(LDFLAGS) -dynamiclib -single_module -undefined dynamic_lookup $(addprefix $(OBJDIR)/,$(OLIST)) $(DICTOBJ) -o $(SHLIBFILE)
else
	@$(LD) $(LDFLAGS) $(SOFLAGS) $(addprefix $(OBJDIR)/,$(OLIST)) $(DICTOBJ) -o $(SHLIBFILE)
endif


shlib: $(SHLIBFILE)


clean:
	@rm -f $(DICTFILE) $(DICTHEAD)
	@rm -f $(OBJDIR)/*.o
	@rm -f $(SHLIBFILE)
	@rm -f $(SFRAME_LIB_PATH)/lib$(LIBRARY).so

distclean:
	@rm -rf $(OBJDIR)
	@rm -rf $(DEPDIR)
	@rm -f $(DICTFILE) $(DICTHEAD)
	@rm -f $(SHLIBFILE)
	@rm -f lib/lib$(LIBRARY).so

.PHONY : shlib default clean

